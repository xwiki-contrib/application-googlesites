<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>GoogleSites</web>
  <name>DebugHTML</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <parent>GoogleSites.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1420066800000</creationDate>
  <date>1420066800000</date>
  <contentUpdateDate>1420066800000</contentUpdateDate>
  <version>1.1</version>
  <title>Debug HTML Conversion</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
import org.apache.velocity.tools.generic.EscapeTool;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import org.xwiki.script.service.ScriptService;
import org.xwiki.xml.html.HTMLCleaner;
import com.xpn.xwiki.web.Utils;
import org.xwiki.xml.html.HTMLUtils;

import org.xwiki.rendering.block.*;
import org.xwiki.rendering.block.match.*;
import org.xwiki.rendering.listener.reference.ResourceType;

def addDebug(str) {
  println str;
}

def getWikiSyntax(html, attachments, pagesByUrl) {

       // cleaning table layout
       if (html.contains("sites-layout-name-one-column"))
         html = html.replaceAll("&lt;body&gt;&lt;div.*?sites-layout-name-one-column.*?&lt;div dir=.ltr.&gt;", "&lt;body&gt;").replaceAll("&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;", "&lt;/body&gt;&lt;/html&gt;")

       // replace successive blockquotes.. multiple times because they can be multiple in a row
       for (i in 1..10) {
        html = html.replaceAll("(&lt;blockquote.*?&gt;)&lt;div.*?&gt;", { return it[1]})
        html = html.replaceAll("&lt;\\/div&gt;(&lt;\\/blockquote&gt;)", { return it[1]})
        html = html.replaceAll("&lt;\\/blockquote&gt;&lt;blockquote.*?&gt;", "")
       }
       
       println """{{{ Cleaned HTML1: ${html} }}}"""

       def cleaner = Utils.getComponent(org.xwiki.xml.html.HTMLCleaner.class)
       def wdoc = cleaner.clean(new StringReader(html));
       def html2 = HTMLUtils.toString(wdoc, true, true);

       
       println """{{{ Cleaned HTML2: ${html2} }}}"""

       def renderingService = Utils.getComponent(ScriptService.class, 'rendering')
       def xdomBlock = renderingService.parse(html2, "xhtml/1.0")

       // find all links and images
       if (xdomBlock!=null) {
         for (image in xdomBlock.getBlocks(new ClassBlockMatcher(ImageBlock.class), Block.Axes.DESCENDANT)) {
            def imageBlockRef = image.getReference();
            def imageURL = imageBlockRef.getReference();
            def qs = ""
            imageURL = imageURL.replaceAll("/_/rsrc/(.*?)/", "/")
            def i = imageURL.indexOf("?");
            if (i!=-1) {
              qs = imageURL.substring(i);
              imageURL = imageURL.substring(0, i);
            }
            def imageRef = (attachments==null) ? null : attachments.get(imageURL);
            addDebug("Found image block: " + imageURL + " -&gt; " + imageRef);
            if (imageRef!=null) {
              imageBlockRef.setType(ResourceType.ATTACHMENT);
              imageBlockRef.setReference(imageRef);
            }
         }
         for (link in xdomBlock.getBlocks(new ClassBlockMatcher(LinkBlock.class), Block.Axes.DESCENDANT)) {
            def linkBlockRef = link.getReference();
            def linkURL = linkBlockRef.getReference();
            def qs = ""
            linkURL = linkURL.replaceAll("/_/rsrc/(.*?)/", "/").replaceAll("/\\?.*/", "")
            def i = linkURL.indexOf("?");
            if (i!=-1) {
              qs = linkURL.substring(i+1);
              linkURL = linkURL.substring(0, i);
            }
            def linkRef = (attachments==null) ? null : attachments.get(linkURL);
 
            if (linkRef!=null) {
              addDebug("Found link block: " + linkURL + " -&gt; " + linkRef);
              linkBlockRef.setType(ResourceType.ATTACHMENT);
              linkBlockRef.setReference(linkRef);
            } else {
              linkRef = (pagesByUrl==null) ? null : pagesByUrl.get(linkURL);
              if (linkRef!=null) {
               addDebug("Found link block: " + linkURL + " -&gt; " + linkRef);
               linkBlockRef.setType(ResourceType.DOCUMENT);
               linkBlockRef.setReference(linkRef);
              } else {
               addDebug("Found link block: " + linkURL + " -&gt; " + linkRef);
             }
            }
         }
       }

       def wikisyntax = renderingService.render(xdomBlock, "xwiki/2.1");
       if (wikisyntax==null) {
           addDebug("Failed to convert")
       }

       return wikisyntax;      
}


if (request.page) {
 def content = xwiki.getDocument(request.page).content;
 content = content.substring(content.indexOf("}") + 2)
 content = content.substring(0, content.lastIndexOf("{") - 2)
 println """{{{Â ${content} }}}"""


 try {  
  def wikisyntax = getWikiSyntax(content, null, null);
  println """{{{ ${wikisyntax} }}}""";
 } catch (e) {
  println "Failed to convert html to wiki syntax"
  println e.getMessage()
 }
} else {
 println "No page was indicated"
}

{{/groovy}}</content>
</xwikidoc>
